import { createAction, createReducer } from '@reduxjs/toolkit';

const initialState = [
  { id: 1, title: 'Task 1', completed: false },
  { id: 2, title: 'Task 2', completed: false },
];

const update = createAction('task/updated');
const remove = createAction('task/removed');

//const TASK_UPDATED = 'task/updated';
//const TASK_DELETED = 'task/deleted';

export function taskCompleted(id) {
  return update({ id, completed: true });
  //   return {
  //     type: TASK_UPDATED,
  //     payload: { id, completed: true },
  //   };
}

export function titleChanged(id) {
  return update({ id, title: `New title for ${id}` });
  //   return {
  //     type: TASK_UPDATED,
  //     payload: { id, title: `New title for ${id}` },
  //   };
}

export function taskDeleted(id) {
  return remove({ id });
  //   return {
  //     type: TASK_DELETED,
  //     payload: { id },
  //   };
}

const taskReducer = createReducer(initialState, (builder) =>
  builder
    .addCase(update, (state, action) => {
      // здесь можно изменять входной state (под капотом новый объект создастся)
      const elementIndex = state.findIndex((el) => el.id === action.payload.id);
      state[elementIndex] = {
        ...state[elementIndex],
        ...action.payload,
      };
    })
    .addCase(remove, (state, action) => {
      // а тут нужно вернуть самому новый объект) хз почему, иначе не зараотает
      return state.filter((el) => el.id !== action.payload.id);
    })
);

// function taskReducer(state = [], action) {
//   switch (action.type) {
//     case update.type /*TASK_UPDATED*/: {
//       const newArray = [...state];
//       const elementIndex = newArray.findIndex((el) => el.id === action.payload.id);
//       newArray[elementIndex] = {
//         ...newArray[elementIndex],
//         ...action.payload,
//       };
//       return newArray;
//     }

//     case remove.type /*TASK_DELETED*/: {
//       const newArray = state.filter((el) => el.id !== action.payload.id);
//       return newArray;
//     }

//     default:
//       return state;
//   }
// }

export default taskReducer;
